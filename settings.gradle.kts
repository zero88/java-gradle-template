/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user manual at https://docs.gradle.org/7.3.3/userguide/multi_project_builds.html
 */
pluginManagement {
    repositories {
        mavenLocal()
        gradlePluginPortal()
    }
}

rootProject.name = "template"
val profile: String by settings
var pp: Array<String> = arrayOf()
val pools = mutableMapOf(
    "code" to arrayOf(":api"),
    "sample" to emptyArray(),
    "integtest" to emptyArray()
)
val docs = arrayOf(":docs:asciidoc")
val excludeCISonar = docs
val excludeCIBuild = pools["sample"]!! + pools["integtest"]!! + excludeCISonar
pools.putAll(
    mapOf(
        "docs" to pools["code"]!!.plus(docs)
    )
)

fun flatten(): List<String> = pools.values.toTypedArray().flatten()

pp = when {
    profile == "all" || profile.isBlank() -> flatten().toTypedArray()
    profile == "ciBuild"                  -> flatten().filter { !excludeCIBuild.contains(it) }.toTypedArray()
    profile == "ciSonar"                  -> flatten().filter { !excludeCISonar.contains(it) }.toTypedArray()
    else                                  -> pools.getOrElse(profile) { throw IllegalArgumentException("Not found profile[$profile]") }
}

pp.forEach { include(it) }

if (gradle is ExtensionAware) {
    val extensions = (gradle as ExtensionAware).extensions
    extensions.add("PROJECT_POOL", pools.toMap())
    extensions.add("SKIP_PUBLISH", excludeCIBuild + arrayOf(":docs", ":sample", ":integtest"))
}
